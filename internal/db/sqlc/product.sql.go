// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: product.sql

package sqlc

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (product_name, product_description, price, is_active)
VALUES ($1, $2, $3, $4)
RETURNING id, product_name, product_description, price, is_active, created_at
`

type CreateProductParams struct {
	ProductName        string
	ProductDescription string
	Price              int64
	IsActive           bool
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ProductName,
		arg.ProductDescription,
		arg.Price,
		arg.IsActive,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.ProductDescription,
		&i.Price,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, product_name, product_description, price, is_active, created_at FROM products WHERE id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.ProductDescription,
		&i.Price,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, product_name, product_description, price, is_active, created_at FROM products ORDER BY created_at DESC
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.ProductDescription,
			&i.Price,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET product_name = $2, product_description = $3, price = $4, is_active = $5
WHERE id = $1
RETURNING id, product_name, product_description, price, is_active, created_at
`

type UpdateProductParams struct {
	ID                 int32
	ProductName        string
	ProductDescription string
	Price              int64
	IsActive           bool
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.ProductName,
		arg.ProductDescription,
		arg.Price,
		arg.IsActive,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.ProductDescription,
		&i.Price,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}
